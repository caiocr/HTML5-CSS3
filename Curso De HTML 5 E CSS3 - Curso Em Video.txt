Comecei: 08:36
pausa: 08:57


{Alguns atralhos do VS Code}
- (ctrl + enter) para tirar o cursor do mouse de dentro das <|>
- Para mover um código pra cima ou para baixo, (basta selecionar o código + alt e mover para cima ou para baixo)
- Para duplicar um arquivo e poder usar a aba html e css juntos. (ctrl+])
- Para envelopar várias 'li' com 'abbr'. seleciona o que quer envelopar, depois (li*>abbr)


{Extensões para o VS Code}
-Live Server ==> Atualiza a página que vc está programando automaticamente 

====================================================================================================================================================

    HTML5 E CSS3 - MÓDULO 1 DE 5

{Repositórios Públicos Para Acompanhar Durante o Curso}

-github.com/gustavoguanabara
-gustavoguanabara.github.io

{Como a internet chega na minha casa?}

- A internet começou durando o periodo de Guerra Fria(1949)
- A internet veio da ARPANET que surgiu durante a guerra para proteger centros militares 

{Como a internet funciona?}

- Binary Digit = BIT
- 1 Byte é uma sequência de 8 bits (bits são representados por 0 e 1)
- Múltiplos do Byte
  1024 Bytes = 1 KB (KiloByte)
  1024 KB = 1 MB (MegaByte)
  1024 MB = 1 GB ( GigaByte)
  1024 GB = 1 TB (TeraByte)
  1024 TB = 1 PB (PetaByte)
  1024 PB = 1 EB (Exabyte)
  1024 EB = 1 ZB (ZettaByte)
  1024 ZB = 1 YB (YottaByte)

{O que é domínio e hospedagem?}

- Domínio é o endereço do seu site (nome que identifica o site)
- Hospedagem é onde você guarda o seu site (Local onde o site fica armazenado)
- Exemplo: URL(www.youtube.com/...) www(Sub-domínio), youtube(Domínio), com(TLD), / (Tudo depois da barra é o caminho)


{A diferença entre HTML, CSS e JavaScript}

- HTML: Linguagem de marcação para hiper texto
- CSS: Folhas de estilo em cascata 
- HTML é uma linguagem focada em conteúdo. Ex em sites: textos, videos, tabelas, imagens
- CSS é focado em design. Ex em sites: cores, sombras, tamanhos, posicionamento 
- Função do JavaScript em sites é a interação. Ex em sites: menus, animações, popups, validações
- Exemplos de conteúdo HTML
  <h1> Exemplo de titulo </h1>  | <h1> é abertura de tag, </h1> é fechamento de tag, e o exemplo é o conteúdo 
  <p> Exemplo de parágrafo </p>
  <img src="foto.png" alt="exemplo de foto"> | img não tem fechamento| img é a abertura de tag, src e alt são parâmetros, foto e exemplo são valores

- Etilo em CSS
  h1 { 
       font-family: arial;
       font-size: 20pt;
       color: blue;
     } 
 h1 é o seletor, dentro do seletor tem a Declaração. ex: color é a propriedade e blue é o valor

- Estrututa básica de um documento HTML

  <!DOCTYPE html>
  <html lang="pt-br">
    <head>
       <meta charset="UTF-8">
       <meta name="viewport"
       content="width=device-width,
       initial-scale=1.0">
       <title>document</title>  
    </head> 
    <body>
       <h1>Olá,Mundo!</h1>
    </body>  
  </html>

- Alguns termos: (h1) é para titulo, (p) é para paragrafo, (hr) para linha horizontal

{Front-end, Back-end e Full-stack}

- Front-end / Client-side: Lado do cliente. Ex: basicamente é o que cuida da experiência do cliente no site 
- Back-end / Server-side: Lado do servidor. Ex: basicamente é o que cuida da interação do codigo com o servidor 
- Full-stack é a junção de front + back- end. Ex: é o responsavel por cuidar da experiência do cliente + a parte de interação com o servidor  

{Parágrafos e Quebras de linhas}

- Tag(br) serve para quebrar linhas ex: 1,2,<br> 3
- tag (&lt;) = < | (&gt;) = >

{Símbolos e emojis no seu site}

-Para adicionar um emoji, tem que colocar a tag(&#x + o id do emoji) ex: &#x1f9D0
- Site para encontrar emojis : emojipedia.org

{Você tem direito de usar qualquer imagem no seu site?}

- Alguns sites para pegar imagens sem direitos autorais: Unsplash, Pexels

{Quais são os formatos para imagens na web?}

- Os formatos mais usanos na web são: PNG e JPEG
- JPEG compacta imagens, PNG também, mas o PNG consegue deixar o fundo transparente o JPEG não

{O tamanho das imagens importam para um site?}

- Normalmente o tamanho ideal é de 1500 KB pra baixo

{A tag img em HTML5}

- atalho no VS Code para abrir imagens (ctrl + tab)

{Como mudar o favicon de um site}

- Favicon é a logo que aparece na aba da pagina do lado do nome do site
- icon archive.com: site para baixar favicons 
- favicon.io : site para mudar o formado da imagem para icon
- Adicionar um icon no vs code: digite -link- depois escolha a opção favicon. depois é só escolhar o favicon com o comando ctrl + tab

{Hierarquia de Títulos}

- lorem: Comando para criar textos de exemplo
- Obs: os comandos de titulos só vão até o nivel 6. (h1,h2,h3...h6)

{Semântica na HTML5 é importante}

- Semântica é o significado não a forma.
- HTML5 se foca na semântica/significado, CSS3 se foca na forma/estilo
- Comentário de um Usuário: Essas tags eram do HTML4, elas se tornaram obsoletas porque o HTML5 veio com a proposta de ser uma linguagem completamente focada na
SEMÂNTICA (no significado de cada elemento) e não na FORMA (colorir, centralizar etc.), isso ficou exclusivamente
(na prática não, mas quem segue boas práticas respeita) na mão das CSS

{Negrito e Itálico do jeito certo} e {Formatações Adicionais em HTML} exercise 8

- Atalho para envelopar uma frase e colocar a tag: ctrl + shift + P depois clicar em wrap with abbreviation e depois escolha qual tag usar.
- Sup: sobrescrito | Sub: subscrito

{Citações e Códigos} exercise 8b

- Fonte mono-espaçada: tag: code
- Usar a tag {Q=quote} para fazer uma citação
- Comando para diminuir a distancia da indexação: shift + tab

{Listas OL e UL} exercise 9

- Tag: (OL)= serve para colocar em ordem em uma lista. e dentro de OL usamos a tag (LI) para descrever cada item da lista.
OBS: a tag para fechar cada item de lista (/LI) se tornou opcional no HTML5
- Tag (UL)= é usada em listas não ordenadas. Existem 3 tipos de (TYPE) na tag UL. (disc, circle, square)
- Atalho para criar varias (LI) ao mesmo tempo= (LI + * +  o numero de itens de lista que você quer criar/ ex: li*7)

{Listas Mistas e de Definição} exercise 9

- tag usada para lista de definições: (DL)
- em uma lista de definição temos o termo (DT) e a descrição (DD)

{Links e Âncoras em HTML5} exercise 10

- tag âncora: (a)-(/a)
- Quando utilizar um link externo sempre use as tags (target="_blank" rel="external"). a tag faz com que o link selecionado seja aberto em outra aba
- Para abrir o link externo em outra aba, basta utilizar a tag (target="_blank"), mas é recomendado usar a tag (rel="external") também 
- Quando usar um link externo você também pode avisar qual idioma a página indicada pelo link utiliza. basta usar a tag (hreflang="en") ao lado da url indicada
- Os 2 valores mais usados no atributo (target) são (target="_blank") para abrir o link em outra aba e o (target="_self") para abrir na mesma aba

{Links Internos}

- Quando usar um link interno, não precisa colocar a url inteira, se o link indicado estiver na mesma pasta que o link principal
- Usar a tag (rel="next") para indicar que irá para a próxima página, e a tag (rel="prev") para indicar que irá voltar para a página anterior
- Quando usar um link que você não confia 100% use a tag (rel="nofollow"). Essa tag indica para o mecanismo de busca que você não confia na página indicada
- Quando quiser abrir o link na mesma aba não precisa colocar (target) ou então coloca o (target="_self")
- Tag para voltar para a pasta anterior (../)
- Significado de (href)= hypertext reference

{Links para Downlods}

- EX: <a href="arquivos/meulivro.pdf" download="meulivro.pdf" type="application/pdf">Baixe aqui o pdf do meu livro </a>
- Site para buscar media types: https://www.iana.org/assignments/media-types/media-types.xhtml

{Imagens que se Adaptam sozinhas} exercise 11

- Usar a tag (picture),colocar a maior imagem primeiro usando a tag (img) e depois, em cima da tag (img) colocar os
 (source:media:type) para ajustar as imagens para qualquer dispositivo.
ex: <picture> source media= "(max-width: 1000px)" srcset="imagens/foto-g.png" type="image/png">
    <img src="imagens/foto-g.png" alt="Imagem Flexível"> </picture>

{Colocando Áudio no seu Site}

- Os formatos aceitos pelos navegadores são, MP3=MPEG, WAV e OGG
- Tentar evitar arquivos WAV pois são muito pesados 
- <audio> preload="metadata" controls autoplay loop </audio>
 Parâmetro [preload="metadata"]= faz com que só carregue os dados do áudio, e só irá carregar o audio completo quando o usuário apertar o play
 Parâmetro [controls]= faz o player aparecer para o usuário
 Parâmetro [autoplay]= faz com que o áudio seja reproduzido assim que a página for carregada
 Parâmetro [loop]= faz com que o áudio seja repetido eternamente assim que acabar sua reprodução 

{Formatos de Vídeo para o seu Site} exercise 12

-Formatos de vídeos mais utilizados nos navegadores: .MP4/.M4V - .WEBM - .OGV

{Vídeos em Hospedagem própria} exercise 12

- <video> width="300" poster="thumb.jpeg" controls </video>
 Parâmetro width: usado para indicar o tamanho que o vídeo irá ocupar na tela
 Parâmetro poster: usado para colocar uma imagem na capa do vídeo 
 Parâmetro controls: usado para mostrar o player do vídeo para o usuário 
-Vídeos hospedados dentro do próprio site consomem muito tráfego de dados (evitar usar esse formato)

{Incorporação de Vídeos Externos}

- Basta ir no youtube ou vimeo, escolher um vídeo, incorporar o link do vídeo e depois colar no código HTML

{Estilos CSS Inline}

- O estilo Inline consiste em colocar os estilos(CSS) junto com o conteúdo(HTML). ex: <body style: "blackground-color: blue;"> 
- O estilo Inline deve ser evitado, pois ele "polui" o código. Só deve ser usado para fazer modificações pontuais. 

{Estilos CSS Internos}

- Usar para modificar uma página apenas. se o site tiver mais páginas, opte por usar as CSS Externas 

{Estilos CSS Externos}

- CSS externos é a maneira mais usada para estilizar os sites
- Para usar CSS externo basta usar a tag (link rel="stylesheet" href="style.css") dentro da tag (head)

==============================================================================================================================================================

    HTML5 E CSS3 - MÓDULO 2 DE 5

{Psicologia Das Cores}

- cores despertam emoções
    - Azul: competência, sabedoria, calma, frio
    - Vermelho: amor, emoção, energia, raiva, perigo
    - Verde: saúde, natureza, dinheiro, sorte, inveja
    - Rosa: amor, romance, sinceridade, cuidados
    - Marrom: terra, robustez, estabilidade, amizade
    - Roxo: criatividade, poder, sabedoria, mistério

{Representando Cores com CSS3}

- Existem quatro formas de reprensentar as cores: nome(blue,yellow..), Hexadecimal(#0000ff=azul), RGB(red=0,green=0,blue=255),
HSL(hue=240,sturation=100%,luminosity=50%= azul)

{Harmonia de Cores}

as cores do círculo cromático são:
- Cores Primárias: Amarelo,Vermelho,Azul
- Cores Secundárias: Laranja, Violeta, Verde
- Cores Terciárias: São misturas das cores primárias e secundárias. EX: amarelo-esverdeado, amarelo-alaranjado, vermelho-alaranjado- vermelho-arroxeado- azul-arroxeado
azul-esverdeado
- Normalmente é utilizado de 3 a 5 cores na paleta de cores de um síte 
- Cores complementares: são cores que tem o maior contraste uma da outra (são opostas no círculo cromático) 
- Cores Análogas: são cores parecidas umas com as outras (são cores próximas no círculo cromático)

{Paleta de Cores}

- site para criar paletas de cores: color.adobe.com - site bom, da pra extrair a paleta de cores de uma logo/imagem
- site para criar paletas aleatórias: coolors.co

{Como capturar cores da tela?}

- Instalar a extensão para conseguir pegar as cores de algum síte = colorzilla

{Como criar degradê com CSS?} exercise 16 cor02
                                                               direção + quantas cores quiser
- para degradê usamos a tag= background-image:linear-gradient (to right, white, blue);
- Configuração Global nas CSS: * {tag}

{Primeiros passos em Tipografia}

- O pai da imprensa: Johannes Gutenberg
- Tipografia é o estudo de como escrever coisas no papel

{Anatomia do tipo}

- A letra (X) é o ponto de partida para a construção de todas as fontes
- Todas as letras minúsculas de uma fonte é baseada na altura do X 
- O espaço dos vazamentos das letras pra cima é chamado de Ascendente, pra baixo é chamado de Descendente
- A altura total da fonte é chamado de (Corpo)
- Glifo é uma letra
- Categorias de fontes: serifadas, sans-serif(não serifada), monoespaçadas(todas com o mesmo espaço), handwriting, display(comemorativas)
- Dar preferência para fontes NÃO serifadas para textos em Sites

{Famílias de fonte com CSS}

- Sempre terminar as "save combination" com sans-serif para letras em sites

{Tamanho de fonte e suas medidas}

- Medidas absolutas: cm(centímetro), mm(milímetro), in(polegada), px(pixel), pt(ponto), pc(paica)
- Medidas relativas: em, ex, rem, vw, vh, %
- Usar somente: (px) ou (em), preferencialmente o (em)
- 16px geralmente é = 1em

{Peso, estilo e shorthand font}

- font-weight: para o peso da fonte(negrito + leve ou mais forte)
- font-style: para colocar em italico 
- text-decoration: para colocar sublinhado
- Da para usar todos esses comandos utilizando um "shorthand", mas tem que seguir essa ordem ==> font-style, font- weight- font-size e font-family
EX: font: italic bolder 3em 'works sans', sans-serif;

{Usando Google Fonts}

-Sempre usar o site ==> fonts.google.com | para achar fontes 
- Normalmente usamos 3/4 tipos de fonte no site, um para grandes títulos, outro para destaques e um para fonte normal

{Usando fontes externas baixadas} exercise 18

- Outro site para achar fontes, mas tem que baixar ==> dafont.com
- Para usar fontes externas baixadas precisa usar a REGRA: @font-face { font-family: 'love'; src: url('fonts/love story.ttf') format('opentype'); } ==> se quiser 
mais tipos, basta adicionar mais (url e format)
- Tipos de formatos: opentype(otf), truetype(ttf), embedded - opentype, truetype-att(apple advanced typography), svg 

{Capturando as fontes usadas em um site}

- usar a extensão: (fonts ninja) para conseguir pegar as fontes de qualquer site. 

{Alinhamento de textos com CSS} exercise 17

- Para centralizar basta usar a tag: text-align: left(para esquerda); right(para direita); center(para o centro); e o texto normalmente tem o alinhamento dos dois
lados. então usamos ==> text-align: justify(para ficar alinhado com os dois lados {direta e esquerda});
- Para dar um espaço no parágrafo igual na redação basta usar: text-indent: 20px;

{Usando o ID com CSS} exercise 19

- Para usar o (ID) basta escolher um seletor e colocar o identificador(id), ex: <h1 id="principal">. depois ir no css e colocar==> h1#principal {}
A (#) significa (id) em css. HTML (id) = CSS (#)
- HTML (class) = CSS (.)

{As diferenças entre id e class} exercise 19

- Não pode usar o (id) mais de uma vez, já o (class) pode ser usado varias vezes
- Não dar nomes as (id e class) pela forma, mas sim pela funcionalidade 
- Para usar a (Class) basta escolher um seletor e colocar a classe(class), ex: <h2 class="basico">| depois ir no css e colocar ==> .basico {}
- Quando usar (class) não precisa colocar o nome do elemento basta colocar EX==> (.basico)
- Para estilizar uma parte de um texto, basta envelopar com a tag (span) e depois adicionar o parámetro (class) ex ==> <span class="basico">
- Também é possivel usar 2 classes ao mesmo tempo EX ==> <h2 class "basico destaque">
- também é possivel usar (id e class) juntos, mas o (id) sobrepõe a class

{Pseudo-classes em CSS} exercise 20

- Uma (div) ocupa uma linha inteira na página
- as psudo-classes são representadas pelos (:)
- pseudo-classes são relacionadas ao estado de um elemento
- (hover) é uma pesudo-classe de vários elementos | hover significa flutuar ou {ficar por cima de algo} | passar o mouse em cima
- div > p {} O símbolo (>) significa que o parágrafo esta dentro da (div/é filho da div) 

{Pseudo-Elementos} exercise 20

- Os pseudo-elementos mexem diretamento no conteúdo do elemento 
- Os pseudo-elementos são representados por (::)
- (::after) é um pesudo-elemento que mostra alguma coisa depois do conteúdo 
- (visited) é uma pseudo-classe que muda a cor de um link quando vc clica nele/ visita ele
- (active) é uma pseudo-classe que deixa o link ativo. ex: a:active {color: green} quando vc clicar e segurar o link ele vai ficar verde

{Modelo de caixas: primeiros passos}

- Um elemento colocado dentro de outro é chamado de (aninhamento)
- <h1> É um elemento de caixa. Todo elemento visível na tela dentro de um site é uma "caixa"
- (border) é uma linha que circula seu conteúdo 
- O espaço entre a linha da altura e largura e a borda é chamado de (padding)/preenchimento
- O espaço fora da borda é chamado de (margin)/margem
- A linha que circula a borda é chamado de (outline)/contorno
- Tipos de caixa: box-level  e  inline-level
- Box-level sempre se inicia em uma nova linha e também ocupa a largura total da tela
- Inline-level não ocupa a largura total, só o necessario e sempre continua na mesma linha 
- exemplos de box-level (div, <h1>-<h6>, p, main, header, nav, article, aside, footer, form, video)
- Exemplos de inline-level (span, a, code, small, strong, em, sup-sub, label, button, input, select)

{Modelo de caixas na prática (parte 1)} exercise 21

- user agent ==> É a configuração feita pelo navegador 

{Modelo de caixas na prática (parte 2)} exercise 21

- Para centralizar a margem basta usar ==> margin: auto;
- shorthand para caixas: 
para borda (border:10px solid blue;) width, style, color 
para preenchimento (padding: 10px 10px 10px 10px;) top,right,bottom,left 
para margem (margin: 20px 20px 40px 20px;) top, right, bottom, left
para contorno (outline: 5px dashed red;) width, style, color

- OBS: se as medidas de paddin ou margin forem exatamente iguais, basta informar uma vez. EX: padding: 10px; margin: 20px; OU se vc informar só 2 medidas,
 a primeira sera pra cima e pra baixo e a segunda sera para direta e esquerda. EX: padding: 10px 20px; ==> top 10px, right 20px, bottom 10px, left 20px
- Se eu quiser centralizar a margem com a shorthand, basta mudar o valor de right e left para (auto) ex: margin: 10px auto 10px auto
- Para transformar uma box-level(h1) em inline-level basta adicionar ==> (display : inline;) | quando isso é feito não precisa colocar (height e width)

{Grouping Tags} exercise 21
# rever depois se necessario 

{Sombra nas Caixas}

- Basta ir no google chrome (dev tools) e configurar a box-shadow
- box-shadow: 1px 1px 1px black

{Caixas com vértices arredondados}

- a tag para fazer o arredondamento da borda é (border-radius)

{Bordas decoradas}

- tag [border-image: |source|url('borda.png') |slice|27 |repeat|repeat]

{Variáveis em CSS} desafio 10

- Para adicionar uma variável no css, basta adicionar a pseudo-classe (:root) e toda variável em CSS tem que começar com (--)
EX: :root { --cor0: #c5ebd6 }

{Responsividade para sites} desafio 10

- Responsividade é adaptar o tamanho do conteúdo do site ao tamanho da tela do usuário 
- A largura ideal para deixar o site responsivo é de 1000 a 1200 px
- Extensão para testar responsividade (window resizer)

{Melhoreando o Formato do conteúdo} desafio 10

- Normalmente a margin dos parágrafos é (15px 0px 15px 0px) de 15px em cima e embaixo 

{Tornando um vídeo responsivo} desafio 10

==================================================================================================================================================================

    HTML5 E CSS3 - Módulo 3 de 5

{O que é Git e GitHub?}

- o termo (push) significa jogar do repositório local para o remoto 
- repositório é um local onde você guarda coisas 
- Git é um gerenciador de versões que guarda versões anteriores do projeto/código dentro do computador (repositório local)
- GitHub serve para guardar/hospedar os projetos. sempre fazer um push do git para o github 













	
